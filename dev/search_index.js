var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MutableConvexHulls","category":"page"},{"location":"#MutableConvexHulls","page":"Home","title":"MutableConvexHulls","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MutableConvexHulls.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MutableConvexHulls]","category":"page"},{"location":"#MutableConvexHulls.MutableConvexHulls","page":"Home","title":"MutableConvexHulls.MutableConvexHulls","text":"MutableConvexHulls.jl provides ways to calculate and update vertex representations of planar convex polytopes  (i.e. convex hulls). It is intended for use in situations when a convex hull must be updated iteratively with addition or removal of points.\n\nSee also MutableConvexHull, LowerMutableConvexHull, UpperMutableConvexHull, monotonechain, addpoint!, mergepoints!, removepoint!, \n\n\n\n\n\n","category":"module"},{"location":"#MutableConvexHulls.HullNodeIterator-Tuple{AbstractConvexHull}","page":"Home","title":"MutableConvexHulls.HullNodeIterator","text":"HullNodeIterator(hull [, rev])\n\nReturns an iterator over the nodes in the linked list representing the convex hull.\n\nIf rev is true, the iterator will start at the tail of the list and advance toward the head. Otherwise, it will start at the head of the list and advance toward the tail.\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.HullNodeIterator-Tuple{S} where S<:HullNode","page":"Home","title":"MutableConvexHulls.HullNodeIterator","text":"HullNodeIterator(start [, rev])\n\nReturns an iterator over the nodes in the linked list representing the convex hull, starting at the specified node start.\n\nIf rev is true, the iterator will advance toward the head of the list. Otherwise, it will advance toward the tail of the list.\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.MutableConvexHull-Union{Tuple{}, Tuple{Any}, Tuple{F}, Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, F}} where {T, F}","page":"Home","title":"MutableConvexHulls.MutableConvexHull","text":"h = MutableConvexHull{T}([, orientation, collinear, sortedby])\n\nInitialize an empty MutableConvexHull with the provided attributes.\n\norientation specifies whether the points along the convex hull are ordered clockwise CW, or counterclockwise CCW, and defaults to CCW.\n\ncollinear specifies whether collinear points are allowed along the surface of the convex hull, and defaults to false.\n\nsortedby specifies a function to apply to points prior to sorting, and defaults to identity (resulting in default sorting behavior).\n\nSee also: monotonechain, jarvismarch, addpoint!, mergepoints!, removepoint!\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.MutableLowerConvexHull-Union{Tuple{}, Tuple{Any}, Tuple{F}, Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, F}} where {T, F}","page":"Home","title":"MutableConvexHulls.MutableLowerConvexHull","text":"h = MutableLowerConvexHull{T}([, orientation, collinear, sortedby])\n\nInitialize an empty MutableLowerConvexHull with the provided attributes.\n\norientation specifies whether the points along the convex hull are ordered clockwise CW, or counterclockwise CCW, and defaults to CCW.\n\ncollinear specifies whether collinear points are allowed along the surface of the convex hull, and defaults to false.\n\nsortedby specifies a function to apply to points prior to sorting, and defaults to identity (resulting in default sorting behavior).\n\nSee also: lower_monotonechain, lower_jarvismarch, addpoint!, mergepoints!, removepoint!\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.MutableUpperConvexHull-Union{Tuple{}, Tuple{Any}, Tuple{F}, Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, F}} where {T, F}","page":"Home","title":"MutableConvexHulls.MutableUpperConvexHull","text":"h = MutableUpperConvexHull{T}([, orientation, collinear, sortedby])\n\nInitialize an empty MutableUpperConvexHull with the provided attributes.\n\norientation specifies whether the points along the convex hull are ordered clockwise CW, or counterclockwise CCW, and defaults to CCW.\n\ncollinear specifies whether collinear points are allowed along the surface of the convex hull, and defaults to false.\n\nsortedby specifies a function to apply to points prior to sorting, and defaults to identity (resulting in default sorting behavior).\n\nSee also: upper_monotonechain, upper_jarvismarch, addpoint!, mergepoints!, removepoint!\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.PointNodeIterator-Tuple{AbstractConvexHull}","page":"Home","title":"MutableConvexHulls.PointNodeIterator","text":"PointNodeIterator(hull [, rev])\n\nReturns an iterator over the nodes in the linked list representing the points contained by the convex hull.\n\nIf rev is true, the iterator will start at the tail of the list and advance toward the head. Otherwise, it will start at the head of the list and advance toward the tail.\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.PointNodeIterator-Tuple{S} where S","page":"Home","title":"MutableConvexHulls.PointNodeIterator","text":"PointNodeIterator(start [, rev])\n\nReturns an iterator over the nodes in the linked list representing the points contained by the convex hull, starting at the specified node start.\n\nIf rev is true, the iterator will advance toward the head of the list. Otherwise, it will advance toward the tail of the list.\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.addpoint!-Union{Tuple{T}, Tuple{AbstractConvexHull{T}, T}} where T","page":"Home","title":"MutableConvexHulls.addpoint!","text":"addpoint!(hull, point)\n\nAdd point to the list of points contained by the provided convex hull hull. If point lies outside the convex hull, the list of hull points will be updated accordingly.\n\nReturns a tuple containing the hull and a boolean, which is true if the added point expands the convex hull and is false otherwise.\n\nSee also: mergepoints!, removepoint!\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.buildinreverse-Tuple{Union{MutableConvexHull, MutableLowerConvexHull}}","page":"Home","title":"MutableConvexHulls.buildinreverse","text":"buildinreverse(h) -> Bool\n\nReturn true if the monotonechain algorithm should start at the last point in h.points, and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.firstpoint-Tuple{Union{MutableConvexHull, MutableLowerConvexHull}}","page":"Home","title":"MutableConvexHulls.firstpoint","text":"node = firstpoint(h)\n\nGet the first point on h.points that should be considered for the monotone chain algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.insidehull-Union{Tuple{T}, Tuple{T, MutableConvexHull{T}}} where T","page":"Home","title":"MutableConvexHulls.insidehull","text":"insidehull(data, hull) -> Bool\n\nReturn true if the data lies within the interior of hull and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.jarvismarch!-Union{Tuple{T}, Tuple{Union{AbstractConvexHull{T}, PairedLinkedLists.AbstractList{T}}, Vararg{Any, 4}}, Tuple{Union{AbstractConvexHull{T}, PairedLinkedLists.AbstractList{T}}, Any, Any, Any, Any, Union{Nothing, HullNode{T, L} where L<:(MutableConvexHulls.AbstractHullList{T}), PointNode{T, L, N} where {L<:(MutableConvexHulls.AbstractPointList{T}), N<:(MutableConvexHulls.AbstractHullNode{T})}}}} where T","page":"Home","title":"MutableConvexHulls.jarvismarch!","text":"jarvismarch!(hull [, initedge, stop])\n\nDetermine the convex hull of the points contained in the provided hull.points using the Jarvis march algorithm.  Each node in the list should contain a two-dimensional point, and the nodes are assumed to be sorted  (e.g. by lowest \"x\" value and by lowest \"y\" in case of ties, though some other sorting methods may produce valid results).\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.jarvismarch-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Home","title":"MutableConvexHulls.jarvismarch","text":"h = jarvismarch(points [; orientation, collinear, sortedby])\n\nReturn the convex hull generated from the provided points.\n\norientation specifies whether the points along the convex hull are ordered clockwise CW, or counterclockwise CCW, and defaults to CCW.\n\ncollinear specifies whether collinear points are allowed along the surface of the convex hull, and defaults to false.\n\nsortedby specifies a function to apply to points prior to sorting, and defaults to identity (resulting in default sorting behavior).\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.lastpoint-Tuple{Union{MutableConvexHull, MutableLowerConvexHull}}","page":"Home","title":"MutableConvexHulls.lastpoint","text":"node = lastpoint(h)\n\nGet the last point on h.points that should be considered for the monotone chain algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.lower_jarvismarch-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Home","title":"MutableConvexHulls.lower_jarvismarch","text":"lh = lower_jarvismarch(points [; orientation, collinear, sortedby])\n\nReturn the lower convex hull generated from the provided points.\n\norientation specifies whether the points along the convex hull are ordered clockwise CW, or counterclockwise CCW, and defaults to CCW.\n\ncollinear specifies whether collinear points are allowed along the surface of the convex hull, and defaults to false.\n\nsortedby specifies a function to apply to points prior to sorting, and defaults to identity (resulting in default sorting behavior).\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.lower_monotonechain-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Home","title":"MutableConvexHulls.lower_monotonechain","text":"lh = lower_monotonechain(points [; orientation, collinear, sortedby])\n\nReturn the lower convex hull generated from the provided points.\n\norientation specifies whether the points along the convex hull are ordered clockwise CW, or counterclockwise CCW, and defaults to CCW.\n\ncollinear specifies whether collinear points are allowed along the surface of the convex hull, and defaults to false.\n\nsortedby specifies a function to apply to points prior to sorting, and defaults to identity (resulting in default sorting behavior).\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.mergehulls!-Union{Tuple{H}, Tuple{H, Vararg{H}}} where H<:AbstractConvexHull","page":"Home","title":"MutableConvexHulls.mergehulls!","text":"mergehulls!(hull, otherhulls...)\n\nMerge the points contained in otherhulls into hull. See Chan's algorithm for a similar approach.\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.mergepoints!-Union{Tuple{T}, Tuple{MutableConvexHull{T}, AbstractVector{T}}} where T","page":"Home","title":"MutableConvexHulls.mergepoints!","text":"mergepoints!(hull, points)\n\nAdd points to the list of points contained by the provided convex hull hull. If any of the points lie outside the convex hull, the list of hull points will be updated accordingly.\n\nThis function finds the convex hull of the points to be added before merging them with the hull. See  Chan's algorithm for a similar idea.\n\nSee also: addpoint!, removepoint!\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.monotonechain!-Union{Tuple{Union{MutableLowerConvexHull, MutableUpperConvexHull}}, Tuple{T}, Tuple{Union{MutableLowerConvexHull, MutableUpperConvexHull}, PointNode{T, L, N} where {L<:(MutableConvexHulls.AbstractPointList{T}), N<:(MutableConvexHulls.AbstractHullNode{T})}}, Tuple{Union{MutableLowerConvexHull, MutableUpperConvexHull}, PointNode{T, L, N} where {L<:(MutableConvexHulls.AbstractPointList{T}), N<:(MutableConvexHulls.AbstractHullNode{T})}, PointNode{T, L, N} where {L<:(MutableConvexHulls.AbstractPointList{T}), N<:(MutableConvexHulls.AbstractHullNode{T})}}} where T","page":"Home","title":"MutableConvexHulls.monotonechain!","text":"monotonechain!(hull [, start, stop])\n\nDetermine the convex hull of the points contained in the provided hull.points using the monotone chain algorithm.  Each node in the list should contain a two-dimensional point, and the nodes are assumed to be sorted  (e.g. by lowest \"x\" value and by lowest \"y\" in case of ties, though some other sorting methods may produce valid results).\n\nstart and stop should be nodes contained in hull.points. If start and/or stop are provided, the convex hull will only be updated on the inclusive interval between start and stop. This allows efficient removal of points from a convex hull.\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.monotonechain-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Home","title":"MutableConvexHulls.monotonechain","text":"h = monotonechain(points [; orientation, collinear, sortedby])\n\nReturn the convex hull generated from the provided points.\n\norientation specifies whether the points along the convex hull are ordered clockwise CW, or counterclockwise CCW, and defaults to CCW.\n\ncollinear specifies whether collinear points are allowed along the surface of the convex hull, and defaults to false.\n\nsortedby specifies a function to apply to points prior to sorting, and defaults to identity (resulting in default sorting behavior).\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.removepoint!-Union{Tuple{T}, Tuple{AbstractConvexHull{T}, HullNode{T, L} where L<:(MutableConvexHulls.AbstractHullList{T})}} where T","page":"Home","title":"MutableConvexHulls.removepoint!","text":"removepoint!(hull, node)\n\nRemoves node from hull. If the node corresponds to a point on the convex hull, the list of hull points will be updated accordingly.\n\nReturns a tuple containing the hull and a boolean, which is true if a point on the convex hull was removed and is false if an interior or duplicate point was removed.\n\nSee also: addpoint!, mergepoints!\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.upper_jarvismarch-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Home","title":"MutableConvexHulls.upper_jarvismarch","text":"uh = upper_jarvismarch(points [; orientation, collinear, sortedby])\n\nReturn the upper convex hull generated from the provided points.\n\norientation specifies whether the points along the convex hull are ordered clockwise CW, or counterclockwise CCW, and defaults to CCW.\n\ncollinear specifies whether collinear points are allowed along the surface of the convex hull, and defaults to false.\n\nsortedby specifies a function to apply to points prior to sorting, and defaults to identity (resulting in default sorting behavior).\n\n\n\n\n\n","category":"method"},{"location":"#MutableConvexHulls.upper_monotonechain-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Home","title":"MutableConvexHulls.upper_monotonechain","text":"uh = upper_monotonechain(points [; orientation, collinear, sortedby])\n\nReturn the upper convex hull generated from the provided points.\n\norientation specifies whether the points along the convex hull are ordered clockwise CW, or counterclockwise CCW, and defaults to CCW.\n\ncollinear specifies whether collinear points are allowed along the surface of the convex hull, and defaults to false.\n\nsortedby specifies a function to apply to points prior to sorting, and defaults to identity (resulting in default sorting behavior).\n\n\n\n\n\n","category":"method"}]
}
